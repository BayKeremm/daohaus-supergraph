// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ModuleProxyCreation extends EthereumEvent {
  get params(): ModuleProxyCreation__Params {
    return new ModuleProxyCreation__Params(this);
  }
}

export class ModuleProxyCreation__Params {
  _event: ModuleProxyCreation;

  constructor(event: ModuleProxyCreation) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get masterCopy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SummonMinion extends EthereumEvent {
  get params(): SummonMinion__Params {
    return new SummonMinion__Params(this);
  }
}

export class SummonMinion__Params {
  _event: SummonMinion;

  constructor(event: SummonMinion) {
    this._event = event;
  }

  get minion(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get moloch(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get avatar(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get details(): string {
    return this._event.parameters[3].value.toString();
  }

  get minionType(): string {
    return this._event.parameters[4].value.toString();
  }

  get minQuorum(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SafeMinionFactory__minionsResult {
  value0: Address;
  value1: string;

  constructor(value0: Address, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromString(this.value1));
    return map;
  }
}

export class SafeMinionFactory extends SmartContract {
  static bind(address: Address): SafeMinionFactory {
    return new SafeMinionFactory("SafeMinionFactory", address);
  }

  deployModule(
    masterCopy: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): Address {
    let result = super.call("deployModule", [
      EthereumValue.fromAddress(masterCopy),
      EthereumValue.fromBytes(initializer),
      EthereumValue.fromUnsignedBigInt(saltNonce)
    ]);

    return result[0].toAddress();
  }

  try_deployModule(
    masterCopy: Address,
    initializer: Bytes,
    saltNonce: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("deployModule", [
      EthereumValue.fromAddress(masterCopy),
      EthereumValue.fromBytes(initializer),
      EthereumValue.fromUnsignedBigInt(saltNonce)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  gnosisFallbackLibrary(): Address {
    let result = super.call("gnosisFallbackLibrary", []);

    return result[0].toAddress();
  }

  try_gnosisFallbackLibrary(): CallResult<Address> {
    let result = super.tryCall("gnosisFallbackLibrary", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  gnosisMultisendLibrary(): Address {
    let result = super.call("gnosisMultisendLibrary", []);

    return result[0].toAddress();
  }

  try_gnosisMultisendLibrary(): CallResult<Address> {
    let result = super.tryCall("gnosisMultisendLibrary", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  gnosisSingleton(): Address {
    let result = super.call("gnosisSingleton", []);

    return result[0].toAddress();
  }

  try_gnosisSingleton(): CallResult<Address> {
    let result = super.tryCall("gnosisSingleton", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  minionCount(): BigInt {
    let result = super.call("minionCount", []);

    return result[0].toBigInt();
  }

  try_minionCount(): CallResult<BigInt> {
    let result = super.tryCall("minionCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  minionList(param0: BigInt): Address {
    let result = super.call("minionList", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_minionList(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("minionList", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  minionType(): string {
    let result = super.call("minionType", []);

    return result[0].toString();
  }

  try_minionType(): CallResult<string> {
    let result = super.tryCall("minionType", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  minions(param0: Address): SafeMinionFactory__minionsResult {
    let result = super.call("minions", [EthereumValue.fromAddress(param0)]);

    return new SafeMinionFactory__minionsResult(
      result[0].toAddress(),
      result[1].toString()
    );
  }

  try_minions(param0: Address): CallResult<SafeMinionFactory__minionsResult> {
    let result = super.tryCall("minions", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new SafeMinionFactory__minionsResult(
        value[0].toAddress(),
        value[1].toString()
      )
    );
  }

  safeMinionSingleton(): Address {
    let result = super.call("safeMinionSingleton", []);

    return result[0].toAddress();
  }

  try_safeMinionSingleton(): CallResult<Address> {
    let result = super.tryCall("safeMinionSingleton", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  summonMinion(
    _moloch: Address,
    _avatar: Address,
    _details: string,
    _minQuorum: BigInt,
    _saltNonce: BigInt
  ): Address {
    let result = super.call("summonMinion", [
      EthereumValue.fromAddress(_moloch),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromString(_details),
      EthereumValue.fromUnsignedBigInt(_minQuorum),
      EthereumValue.fromUnsignedBigInt(_saltNonce)
    ]);

    return result[0].toAddress();
  }

  try_summonMinion(
    _moloch: Address,
    _avatar: Address,
    _details: string,
    _minQuorum: BigInt,
    _saltNonce: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("summonMinion", [
      EthereumValue.fromAddress(_moloch),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromString(_details),
      EthereumValue.fromUnsignedBigInt(_minQuorum),
      EthereumValue.fromUnsignedBigInt(_saltNonce)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  summonMinionAndSafe(
    _moloch: Address,
    _details: string,
    _minQuorum: BigInt,
    _saltNonce: BigInt
  ): Address {
    let result = super.call("summonMinionAndSafe", [
      EthereumValue.fromAddress(_moloch),
      EthereumValue.fromString(_details),
      EthereumValue.fromUnsignedBigInt(_minQuorum),
      EthereumValue.fromUnsignedBigInt(_saltNonce)
    ]);

    return result[0].toAddress();
  }

  try_summonMinionAndSafe(
    _moloch: Address,
    _details: string,
    _minQuorum: BigInt,
    _saltNonce: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("summonMinionAndSafe", [
      EthereumValue.fromAddress(_moloch),
      EthereumValue.fromString(_details),
      EthereumValue.fromUnsignedBigInt(_minQuorum),
      EthereumValue.fromUnsignedBigInt(_saltNonce)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _safeMinionSingleton(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gnosisSingleton(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gnosisFallbackLibrary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _gnosisMultisendLibrary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployModuleCall extends EthereumCall {
  get inputs(): DeployModuleCall__Inputs {
    return new DeployModuleCall__Inputs(this);
  }

  get outputs(): DeployModuleCall__Outputs {
    return new DeployModuleCall__Outputs(this);
  }
}

export class DeployModuleCall__Inputs {
  _call: DeployModuleCall;

  constructor(call: DeployModuleCall) {
    this._call = call;
  }

  get masterCopy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get saltNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeployModuleCall__Outputs {
  _call: DeployModuleCall;

  constructor(call: DeployModuleCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SummonMinionCall extends EthereumCall {
  get inputs(): SummonMinionCall__Inputs {
    return new SummonMinionCall__Inputs(this);
  }

  get outputs(): SummonMinionCall__Outputs {
    return new SummonMinionCall__Outputs(this);
  }
}

export class SummonMinionCall__Inputs {
  _call: SummonMinionCall;

  constructor(call: SummonMinionCall) {
    this._call = call;
  }

  get _moloch(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _avatar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _details(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _minQuorum(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _saltNonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SummonMinionCall__Outputs {
  _call: SummonMinionCall;

  constructor(call: SummonMinionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SummonMinionAndSafeCall extends EthereumCall {
  get inputs(): SummonMinionAndSafeCall__Inputs {
    return new SummonMinionAndSafeCall__Inputs(this);
  }

  get outputs(): SummonMinionAndSafeCall__Outputs {
    return new SummonMinionAndSafeCall__Outputs(this);
  }
}

export class SummonMinionAndSafeCall__Inputs {
  _call: SummonMinionAndSafeCall;

  constructor(call: SummonMinionAndSafeCall) {
    this._call = call;
  }

  get _moloch(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _details(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _minQuorum(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _saltNonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SummonMinionAndSafeCall__Outputs {
  _call: SummonMinionAndSafeCall;

  constructor(call: SummonMinionAndSafeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
