// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SummonComplete extends ethereum.Event {
  get params(): SummonComplete__Params {
    return new SummonComplete__Params(this);
  }
}

export class SummonComplete__Params {
  _event: SummonComplete;

  constructor(event: SummonComplete) {
    this._event = event;
  }

  get moloch(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _summoner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _shaman(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get summoningTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get periodDuration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get votingPeriodLength(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get gracePeriodLength(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get proposalDeposit(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get dilutionBound(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get processingReward(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class V22Factory extends ethereum.SmartContract {
  static bind(address: Address): V22Factory {
    return new V22Factory("V22Factory", address);
  }

  daoIdx(): BigInt {
    let result = super.call("daoIdx", "daoIdx():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoIdx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoIdx", "daoIdx():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daos(param0: BigInt): Address {
    let result = super.call("daos", "daos(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_daos(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("daos", "daos(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  summonMoloch(
    _summoner: Address,
    _shaman: Address,
    _approvedTokens: Array<Address>,
    _periodDuration: BigInt,
    _votingPeriodLength: BigInt,
    _gracePeriodLength: BigInt,
    _proposalDeposit: BigInt,
    _dilutionBound: BigInt,
    _processingReward: BigInt
  ): Address {
    let result = super.call(
      "summonMoloch",
      "summonMoloch(address,address,address[],uint256,uint256,uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_summoner),
        ethereum.Value.fromAddress(_shaman),
        ethereum.Value.fromAddressArray(_approvedTokens),
        ethereum.Value.fromUnsignedBigInt(_periodDuration),
        ethereum.Value.fromUnsignedBigInt(_votingPeriodLength),
        ethereum.Value.fromUnsignedBigInt(_gracePeriodLength),
        ethereum.Value.fromUnsignedBigInt(_proposalDeposit),
        ethereum.Value.fromUnsignedBigInt(_dilutionBound),
        ethereum.Value.fromUnsignedBigInt(_processingReward)
      ]
    );

    return result[0].toAddress();
  }

  try_summonMoloch(
    _summoner: Address,
    _shaman: Address,
    _approvedTokens: Array<Address>,
    _periodDuration: BigInt,
    _votingPeriodLength: BigInt,
    _gracePeriodLength: BigInt,
    _proposalDeposit: BigInt,
    _dilutionBound: BigInt,
    _processingReward: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "summonMoloch",
      "summonMoloch(address,address,address[],uint256,uint256,uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_summoner),
        ethereum.Value.fromAddress(_shaman),
        ethereum.Value.fromAddressArray(_approvedTokens),
        ethereum.Value.fromUnsignedBigInt(_periodDuration),
        ethereum.Value.fromUnsignedBigInt(_votingPeriodLength),
        ethereum.Value.fromUnsignedBigInt(_gracePeriodLength),
        ethereum.Value.fromUnsignedBigInt(_proposalDeposit),
        ethereum.Value.fromUnsignedBigInt(_dilutionBound),
        ethereum.Value.fromUnsignedBigInt(_processingReward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SummonMolochCall extends ethereum.Call {
  get inputs(): SummonMolochCall__Inputs {
    return new SummonMolochCall__Inputs(this);
  }

  get outputs(): SummonMolochCall__Outputs {
    return new SummonMolochCall__Outputs(this);
  }
}

export class SummonMolochCall__Inputs {
  _call: SummonMolochCall;

  constructor(call: SummonMolochCall) {
    this._call = call;
  }

  get _summoner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shaman(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _approvedTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _periodDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _votingPeriodLength(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _gracePeriodLength(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _proposalDeposit(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _dilutionBound(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _processingReward(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class SummonMolochCall__Outputs {
  _call: SummonMolochCall;

  constructor(call: SummonMolochCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
