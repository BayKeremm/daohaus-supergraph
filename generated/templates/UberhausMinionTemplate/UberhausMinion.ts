// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Canceled extends EthereumEvent {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalType(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class DelegateAppointed extends EthereumEvent {
  get params(): DelegateAppointed__Params {
    return new DelegateAppointed__Params(this);
  }
}

export class DelegateAppointed__Params {
  _event: DelegateAppointed;

  constructor(event: DelegateAppointed) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get executor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currentDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DoWithdraw extends EthereumEvent {
  get params(): DoWithdraw__Params {
    return new DoWithdraw__Params(this);
  }
}

export class DoWithdraw__Params {
  _event: DoWithdraw;

  constructor(event: DoWithdraw) {
    this._event = event;
  }

  get targetDao(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ExecuteAction extends EthereumEvent {
  get params(): ExecuteAction__Params {
    return new ExecuteAction__Params(this);
  }
}

export class ExecuteAction__Params {
  _event: ExecuteAction;

  constructor(event: ExecuteAction) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get executor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HausWithdraw extends EthereumEvent {
  get params(): HausWithdraw__Params {
    return new HausWithdraw__Params(this);
  }
}

export class HausWithdraw__Params {
  _event: HausWithdraw;

  constructor(event: HausWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Impeachment extends EthereumEvent {
  get params(): Impeachment__Params {
    return new Impeachment__Params(this);
  }
}

export class Impeachment__Params {
  _event: Impeachment;

  constructor(event: Impeachment) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get impeacher(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposeAction extends EthereumEvent {
  get params(): ProposeAction__Params {
    return new ProposeAction__Params(this);
  }
}

export class ProposeAction__Params {
  _event: ProposeAction;

  constructor(event: ProposeAction) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposeAppointment extends EthereumEvent {
  get params(): ProposeAppointment__Params {
    return new ProposeAppointment__Params(this);
  }
}

export class ProposeAppointment__Params {
  _event: ProposeAppointment;

  constructor(event: ProposeAppointment) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nominee(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get retireTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PulledFunds extends EthereumEvent {
  get params(): PulledFunds__Params {
    return new PulledFunds__Params(this);
  }
}

export class PulledFunds__Params {
  _event: PulledFunds;

  constructor(event: PulledFunds) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardsClaimed extends EthereumEvent {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get currentDelegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetUberHaus extends EthereumEvent {
  get params(): SetUberHaus__Params {
    return new SetUberHaus__Params(this);
  }
}

export class SetUberHaus__Params {
  _event: SetUberHaus;

  constructor(event: SetUberHaus) {
    this._event = event;
  }

  get uberHaus(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UberhausMinion__actionsResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: boolean;
  value6: Bytes;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: boolean,
    value6: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromAddress(this.value4));
    map.set("value5", EthereumValue.fromBoolean(this.value5));
    map.set("value6", EthereumValue.fromBytes(this.value6));
    return map;
  }
}

export class UberhausMinion__appointmentsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromBoolean(this.value4));
    return map;
  }
}

export class UberhausMinion__delegatesResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;

  constructor(value0: boolean, value1: boolean, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    map.set("value2", EthereumValue.fromBoolean(this.value2));
    return map;
  }
}

export class UberhausMinion extends SmartContract {
  static bind(address: Address): UberhausMinion {
    return new UberhausMinion("UberhausMinion", address);
  }

  DIVIDER(): BigInt {
    let result = super.call("DIVIDER", []);

    return result[0].toBigInt();
  }

  try_DIVIDER(): CallResult<BigInt> {
    let result = super.tryCall("DIVIDER", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  HAUS(): Address {
    let result = super.call("HAUS", []);

    return result[0].toAddress();
  }

  try_HAUS(): CallResult<Address> {
    let result = super.tryCall("HAUS", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  REWARDS(): Address {
    let result = super.call("REWARDS", []);

    return result[0].toAddress();
  }

  try_REWARDS(): CallResult<Address> {
    let result = super.tryCall("REWARDS", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  actions(param0: BigInt): UberhausMinion__actionsResult {
    let result = super.call("actions", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new UberhausMinion__actionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBoolean(),
      result[6].toBytes()
    );
  }

  try_actions(param0: BigInt): CallResult<UberhausMinion__actionsResult> {
    let result = super.tryCall("actions", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new UberhausMinion__actionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBoolean(),
        value[6].toBytes()
      )
    );
  }

  appointments(param0: BigInt): UberhausMinion__appointmentsResult {
    let result = super.call("appointments", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new UberhausMinion__appointmentsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBoolean()
    );
  }

  try_appointments(
    param0: BigInt
  ): CallResult<UberhausMinion__appointmentsResult> {
    let result = super.tryCall("appointments", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new UberhausMinion__appointmentsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBoolean()
      )
    );
  }

  controller(): Address {
    let result = super.call("controller", []);

    return result[0].toAddress();
  }

  try_controller(): CallResult<Address> {
    let result = super.tryCall("controller", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  currentDelegate(): Address {
    let result = super.call("currentDelegate", []);

    return result[0].toAddress();
  }

  try_currentDelegate(): CallResult<Address> {
    let result = super.tryCall("currentDelegate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  dao(): Address {
    let result = super.call("dao", []);

    return result[0].toAddress();
  }

  try_dao(): CallResult<Address> {
    let result = super.tryCall("dao", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  delegateList(param0: BigInt): Address {
    let result = super.call("delegateList", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_delegateList(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("delegateList", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  delegateRewardsFactor(): BigInt {
    let result = super.call("delegateRewardsFactor", []);

    return result[0].toBigInt();
  }

  try_delegateRewardsFactor(): CallResult<BigInt> {
    let result = super.tryCall("delegateRewardsFactor", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  delegates(param0: Address): UberhausMinion__delegatesResult {
    let result = super.call("delegates", [EthereumValue.fromAddress(param0)]);

    return new UberhausMinion__delegatesResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean()
    );
  }

  try_delegates(param0: Address): CallResult<UberhausMinion__delegatesResult> {
    let result = super.tryCall("delegates", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new UberhausMinion__delegatesResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean()
      )
    );
  }

  desc(): string {
    let result = super.call("desc", []);

    return result[0].toString();
  }

  try_desc(): CallResult<string> {
    let result = super.tryCall("desc", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  executeAction(proposalId: BigInt): Bytes {
    let result = super.call("executeAction", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toBytes();
  }

  try_executeAction(proposalId: BigInt): CallResult<Bytes> {
    let result = super.tryCall("executeAction", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  executeAppointment(proposalId: BigInt): Address {
    let result = super.call("executeAppointment", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toAddress();
  }

  try_executeAppointment(proposalId: BigInt): CallResult<Address> {
    let result = super.tryCall("executeAppointment", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  haus(): Address {
    let result = super.call("haus", []);

    return result[0].toAddress();
  }

  try_haus(): CallResult<Address> {
    let result = super.tryCall("haus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  initialDelegate(): Address {
    let result = super.call("initialDelegate", []);

    return result[0].toAddress();
  }

  try_initialDelegate(): CallResult<Address> {
    let result = super.tryCall("initialDelegate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isMember(user: Address): boolean {
    let result = super.call("isMember", [EthereumValue.fromAddress(user)]);

    return result[0].toBoolean();
  }

  try_isMember(user: Address): CallResult<boolean> {
    let result = super.tryCall("isMember", [EthereumValue.fromAddress(user)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  minionId(): BigInt {
    let result = super.call("minionId", []);

    return result[0].toBigInt();
  }

  try_minionId(): CallResult<BigInt> {
    let result = super.tryCall("minionId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  moloch(): Address {
    let result = super.call("moloch", []);

    return result[0].toAddress();
  }

  try_moloch(): CallResult<Address> {
    let result = super.tryCall("moloch", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  nominateDelegate(
    targetDao: Address,
    nominee: Address,
    retireTime: BigInt,
    details: string
  ): BigInt {
    let result = super.call("nominateDelegate", [
      EthereumValue.fromAddress(targetDao),
      EthereumValue.fromAddress(nominee),
      EthereumValue.fromUnsignedBigInt(retireTime),
      EthereumValue.fromString(details)
    ]);

    return result[0].toBigInt();
  }

  try_nominateDelegate(
    targetDao: Address,
    nominee: Address,
    retireTime: BigInt,
    details: string
  ): CallResult<BigInt> {
    let result = super.tryCall("nominateDelegate", [
      EthereumValue.fromAddress(targetDao),
      EthereumValue.fromAddress(nominee),
      EthereumValue.fromUnsignedBigInt(retireTime),
      EthereumValue.fromString(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  proposeAction(
    targetDao: Address,
    actionTo: Address,
    token: Address,
    actionValue: BigInt,
    actionData: Bytes,
    details: string
  ): BigInt {
    let result = super.call("proposeAction", [
      EthereumValue.fromAddress(targetDao),
      EthereumValue.fromAddress(actionTo),
      EthereumValue.fromAddress(token),
      EthereumValue.fromUnsignedBigInt(actionValue),
      EthereumValue.fromBytes(actionData),
      EthereumValue.fromString(details)
    ]);

    return result[0].toBigInt();
  }

  try_proposeAction(
    targetDao: Address,
    actionTo: Address,
    token: Address,
    actionValue: BigInt,
    actionData: Bytes,
    details: string
  ): CallResult<BigInt> {
    let result = super.tryCall("proposeAction", [
      EthereumValue.fromAddress(targetDao),
      EthereumValue.fromAddress(actionTo),
      EthereumValue.fromAddress(token),
      EthereumValue.fromUnsignedBigInt(actionValue),
      EthereumValue.fromBytes(actionData),
      EthereumValue.fromString(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  uberHaus(): Address {
    let result = super.call("uberHaus", []);

    return result[0].toAddress();
  }

  try_uberHaus(): CallResult<Address> {
    let result = super.tryCall("uberHaus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  updateUberHaus(_uberHaus: Address): Address {
    let result = super.call("updateUberHaus", [
      EthereumValue.fromAddress(_uberHaus)
    ]);

    return result[0].toAddress();
  }

  try_updateUberHaus(_uberHaus: Address): CallResult<Address> {
    let result = super.tryCall("updateUberHaus", [
      EthereumValue.fromAddress(_uberHaus)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  userTokenBalances(param0: Address, param1: Address): BigInt {
    let result = super.call("userTokenBalances", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_userTokenBalances(param0: Address, param1: Address): CallResult<BigInt> {
    let result = super.tryCall("userTokenBalances", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveUberHausCall extends EthereumCall {
  get inputs(): ApproveUberHausCall__Inputs {
    return new ApproveUberHausCall__Inputs(this);
  }

  get outputs(): ApproveUberHausCall__Outputs {
    return new ApproveUberHausCall__Outputs(this);
  }
}

export class ApproveUberHausCall__Inputs {
  _call: ApproveUberHausCall;

  constructor(call: ApproveUberHausCall) {
    this._call = call;
  }
}

export class ApproveUberHausCall__Outputs {
  _call: ApproveUberHausCall;

  constructor(call: ApproveUberHausCall) {
    this._call = call;
  }
}

export class CancelActionCall extends EthereumCall {
  get inputs(): CancelActionCall__Inputs {
    return new CancelActionCall__Inputs(this);
  }

  get outputs(): CancelActionCall__Outputs {
    return new CancelActionCall__Outputs(this);
  }
}

export class CancelActionCall__Inputs {
  _call: CancelActionCall;

  constructor(call: CancelActionCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _type(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CancelActionCall__Outputs {
  _call: CancelActionCall;

  constructor(call: CancelActionCall) {
    this._call = call;
  }
}

export class ClaimDelegateRewardCall extends EthereumCall {
  get inputs(): ClaimDelegateRewardCall__Inputs {
    return new ClaimDelegateRewardCall__Inputs(this);
  }

  get outputs(): ClaimDelegateRewardCall__Outputs {
    return new ClaimDelegateRewardCall__Outputs(this);
  }
}

export class ClaimDelegateRewardCall__Inputs {
  _call: ClaimDelegateRewardCall;

  constructor(call: ClaimDelegateRewardCall) {
    this._call = call;
  }
}

export class ClaimDelegateRewardCall__Outputs {
  _call: ClaimDelegateRewardCall;

  constructor(call: ClaimDelegateRewardCall) {
    this._call = call;
  }
}

export class DoWithdrawCall extends EthereumCall {
  get inputs(): DoWithdrawCall__Inputs {
    return new DoWithdrawCall__Inputs(this);
  }

  get outputs(): DoWithdrawCall__Outputs {
    return new DoWithdrawCall__Outputs(this);
  }
}

export class DoWithdrawCall__Inputs {
  _call: DoWithdrawCall;

  constructor(call: DoWithdrawCall) {
    this._call = call;
  }

  get targetDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DoWithdrawCall__Outputs {
  _call: DoWithdrawCall;

  constructor(call: DoWithdrawCall) {
    this._call = call;
  }
}

export class ExecuteActionCall extends EthereumCall {
  get inputs(): ExecuteActionCall__Inputs {
    return new ExecuteActionCall__Inputs(this);
  }

  get outputs(): ExecuteActionCall__Outputs {
    return new ExecuteActionCall__Outputs(this);
  }
}

export class ExecuteActionCall__Inputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteActionCall__Outputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteAppointmentCall extends EthereumCall {
  get inputs(): ExecuteAppointmentCall__Inputs {
    return new ExecuteAppointmentCall__Inputs(this);
  }

  get outputs(): ExecuteAppointmentCall__Outputs {
    return new ExecuteAppointmentCall__Outputs(this);
  }
}

export class ExecuteAppointmentCall__Inputs {
  _call: ExecuteAppointmentCall;

  constructor(call: ExecuteAppointmentCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteAppointmentCall__Outputs {
  _call: ExecuteAppointmentCall;

  constructor(call: ExecuteAppointmentCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ImpeachDelegateCall extends EthereumCall {
  get inputs(): ImpeachDelegateCall__Inputs {
    return new ImpeachDelegateCall__Inputs(this);
  }

  get outputs(): ImpeachDelegateCall__Outputs {
    return new ImpeachDelegateCall__Outputs(this);
  }
}

export class ImpeachDelegateCall__Inputs {
  _call: ImpeachDelegateCall;

  constructor(call: ImpeachDelegateCall) {
    this._call = call;
  }

  get delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ImpeachDelegateCall__Outputs {
  _call: ImpeachDelegateCall;

  constructor(call: ImpeachDelegateCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uberHaus(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _initialDelegate(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _delegateRewardFactor(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minionId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _desc(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class NominateDelegateCall extends EthereumCall {
  get inputs(): NominateDelegateCall__Inputs {
    return new NominateDelegateCall__Inputs(this);
  }

  get outputs(): NominateDelegateCall__Outputs {
    return new NominateDelegateCall__Outputs(this);
  }
}

export class NominateDelegateCall__Inputs {
  _call: NominateDelegateCall;

  constructor(call: NominateDelegateCall) {
    this._call = call;
  }

  get targetDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nominee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get retireTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get details(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class NominateDelegateCall__Outputs {
  _call: NominateDelegateCall;

  constructor(call: NominateDelegateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProposeActionCall extends EthereumCall {
  get inputs(): ProposeActionCall__Inputs {
    return new ProposeActionCall__Inputs(this);
  }

  get outputs(): ProposeActionCall__Outputs {
    return new ProposeActionCall__Outputs(this);
  }
}

export class ProposeActionCall__Inputs {
  _call: ProposeActionCall;

  constructor(call: ProposeActionCall) {
    this._call = call;
  }

  get targetDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get actionTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get actionValue(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get actionData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get details(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ProposeActionCall__Outputs {
  _call: ProposeActionCall;

  constructor(call: ProposeActionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PullGuildFundsCall extends EthereumCall {
  get inputs(): PullGuildFundsCall__Inputs {
    return new PullGuildFundsCall__Inputs(this);
  }

  get outputs(): PullGuildFundsCall__Outputs {
    return new PullGuildFundsCall__Outputs(this);
  }
}

export class PullGuildFundsCall__Inputs {
  _call: PullGuildFundsCall;

  constructor(call: PullGuildFundsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullGuildFundsCall__Outputs {
  _call: PullGuildFundsCall;

  constructor(call: PullGuildFundsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetInitialDelegateCall extends EthereumCall {
  get inputs(): SetInitialDelegateCall__Inputs {
    return new SetInitialDelegateCall__Inputs(this);
  }

  get outputs(): SetInitialDelegateCall__Outputs {
    return new SetInitialDelegateCall__Outputs(this);
  }
}

export class SetInitialDelegateCall__Inputs {
  _call: SetInitialDelegateCall;

  constructor(call: SetInitialDelegateCall) {
    this._call = call;
  }
}

export class SetInitialDelegateCall__Outputs {
  _call: SetInitialDelegateCall;

  constructor(call: SetInitialDelegateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateUberHausCall extends EthereumCall {
  get inputs(): UpdateUberHausCall__Inputs {
    return new UpdateUberHausCall__Inputs(this);
  }

  get outputs(): UpdateUberHausCall__Outputs {
    return new UpdateUberHausCall__Outputs(this);
  }
}

export class UpdateUberHausCall__Inputs {
  _call: UpdateUberHausCall;

  constructor(call: UpdateUberHausCall) {
    this._call = call;
  }

  get _uberHaus(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateUberHausCall__Outputs {
  _call: UpdateUberHausCall;

  constructor(call: UpdateUberHausCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
