// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ActionCanceled extends EthereumEvent {
  get params(): ActionCanceled__Params {
    return new ActionCanceled__Params(this);
  }
}

export class ActionCanceled__Params {
  _event: ActionCanceled;

  constructor(event: ActionCanceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExecuteStream extends EthereumEvent {
  get params(): ExecuteStream__Params {
    return new ExecuteStream__Params(this);
  }
}

export class ExecuteStream__Params {
  _event: ExecuteStream;

  constructor(event: ExecuteStream) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get executor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposeStream extends EthereumEvent {
  get params(): ProposeStream__Params {
    return new ProposeStream__Params(this);
  }
}

export class ProposeStream__Params {
  _event: ProposeStream;

  constructor(event: ProposeStream) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PulledFunds extends EthereumEvent {
  get params(): PulledFunds__Params {
    return new PulledFunds__Params(this);
  }
}

export class PulledFunds__Params {
  _event: PulledFunds;

  constructor(event: PulledFunds) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StreamCanceled extends EthereumEvent {
  get params(): StreamCanceled__Params {
    return new StreamCanceled__Params(this);
  }
}

export class StreamCanceled__Params {
  _event: StreamCanceled;

  constructor(event: StreamCanceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get canceledBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawBalance extends EthereumEvent {
  get params(): WithdrawBalance__Params {
    return new WithdrawBalance__Params(this);
  }
}

export class WithdrawBalance__Params {
  _event: WithdrawBalance;

  constructor(event: WithdrawBalance) {
    this._event = event;
  }

  get superToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlyingToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get withdrawnBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get downgraded(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class SuperfluidMinion__streamsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: boolean;
  value7: boolean;
  value8: Bytes;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: boolean,
    value7: boolean,
    value8: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromBoolean(this.value6));
    map.set("value7", EthereumValue.fromBoolean(this.value7));
    map.set("value8", EthereumValue.fromBytes(this.value8));
    return map;
  }
}

export class SuperfluidMinion extends SmartContract {
  static bind(address: Address): SuperfluidMinion {
    return new SuperfluidMinion("SuperfluidMinion", address);
  }

  executeAction(_proposalId: BigInt): Bytes {
    let result = super.call("executeAction", [
      EthereumValue.fromUnsignedBigInt(_proposalId)
    ]);

    return result[0].toBytes();
  }

  try_executeAction(_proposalId: BigInt): CallResult<Bytes> {
    let result = super.tryCall("executeAction", [
      EthereumValue.fromUnsignedBigInt(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  isMember(_moloch: Address, _user: Address): boolean {
    let result = super.call("isMember", [
      EthereumValue.fromAddress(_moloch),
      EthereumValue.fromAddress(_user)
    ]);

    return result[0].toBoolean();
  }

  try_isMember(_moloch: Address, _user: Address): CallResult<boolean> {
    let result = super.tryCall("isMember", [
      EthereumValue.fromAddress(_moloch),
      EthereumValue.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  moloch(): Address {
    let result = super.call("moloch", []);

    return result[0].toAddress();
  }

  try_moloch(): CallResult<Address> {
    let result = super.tryCall("moloch", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  proposeAction(
    _to: Address,
    _token: Address,
    _rate: BigInt,
    _minDeposit: BigInt,
    _ctx: Bytes,
    details: string
  ): BigInt {
    let result = super.call("proposeAction", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromAddress(_token),
      EthereumValue.fromUnsignedBigInt(_rate),
      EthereumValue.fromUnsignedBigInt(_minDeposit),
      EthereumValue.fromBytes(_ctx),
      EthereumValue.fromString(details)
    ]);

    return result[0].toBigInt();
  }

  try_proposeAction(
    _to: Address,
    _token: Address,
    _rate: BigInt,
    _minDeposit: BigInt,
    _ctx: Bytes,
    details: string
  ): CallResult<BigInt> {
    let result = super.tryCall("proposeAction", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromAddress(_token),
      EthereumValue.fromUnsignedBigInt(_rate),
      EthereumValue.fromUnsignedBigInt(_minDeposit),
      EthereumValue.fromBytes(_ctx),
      EthereumValue.fromString(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  sfApp(): Address {
    let result = super.call("sfApp", []);

    return result[0].toAddress();
  }

  try_sfApp(): CallResult<Address> {
    let result = super.tryCall("sfApp", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  streams(param0: BigInt): SuperfluidMinion__streamsResult {
    let result = super.call("streams", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new SuperfluidMinion__streamsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBytes()
    );
  }

  try_streams(param0: BigInt): CallResult<SuperfluidMinion__streamsResult> {
    let result = super.tryCall("streams", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new SuperfluidMinion__streamsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBytes()
      )
    );
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelActionCall extends EthereumCall {
  get inputs(): CancelActionCall__Inputs {
    return new CancelActionCall__Inputs(this);
  }

  get outputs(): CancelActionCall__Outputs {
    return new CancelActionCall__Outputs(this);
  }
}

export class CancelActionCall__Inputs {
  _call: CancelActionCall;

  constructor(call: CancelActionCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelActionCall__Outputs {
  _call: CancelActionCall;

  constructor(call: CancelActionCall) {
    this._call = call;
  }
}

export class CancelStreamCall extends EthereumCall {
  get inputs(): CancelStreamCall__Inputs {
    return new CancelStreamCall__Inputs(this);
  }

  get outputs(): CancelStreamCall__Outputs {
    return new CancelStreamCall__Outputs(this);
  }
}

export class CancelStreamCall__Inputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelStreamCall__Outputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }
}

export class ExecuteActionCall extends EthereumCall {
  get inputs(): ExecuteActionCall__Inputs {
    return new ExecuteActionCall__Inputs(this);
  }

  get outputs(): ExecuteActionCall__Outputs {
    return new ExecuteActionCall__Outputs(this);
  }
}

export class ExecuteActionCall__Inputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteActionCall__Outputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _moloch(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sfApp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class ProposeActionCall extends EthereumCall {
  get inputs(): ProposeActionCall__Inputs {
    return new ProposeActionCall__Inputs(this);
  }

  get outputs(): ProposeActionCall__Outputs {
    return new ProposeActionCall__Outputs(this);
  }
}

export class ProposeActionCall__Inputs {
  _call: ProposeActionCall;

  constructor(call: ProposeActionCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get details(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ProposeActionCall__Outputs {
  _call: ProposeActionCall;

  constructor(call: ProposeActionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpgradeTokenCall extends EthereumCall {
  get inputs(): UpgradeTokenCall__Inputs {
    return new UpgradeTokenCall__Inputs(this);
  }

  get outputs(): UpgradeTokenCall__Outputs {
    return new UpgradeTokenCall__Outputs(this);
  }
}

export class UpgradeTokenCall__Inputs {
  _call: UpgradeTokenCall;

  constructor(call: UpgradeTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpgradeTokenCall__Outputs {
  _call: UpgradeTokenCall;

  constructor(call: UpgradeTokenCall) {
    this._call = call;
  }
}

export class WithdrawRemainingFundsCall extends EthereumCall {
  get inputs(): WithdrawRemainingFundsCall__Inputs {
    return new WithdrawRemainingFundsCall__Inputs(this);
  }

  get outputs(): WithdrawRemainingFundsCall__Outputs {
    return new WithdrawRemainingFundsCall__Outputs(this);
  }
}

export class WithdrawRemainingFundsCall__Inputs {
  _call: WithdrawRemainingFundsCall;

  constructor(call: WithdrawRemainingFundsCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _downgrade(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawRemainingFundsCall__Outputs {
  _call: WithdrawRemainingFundsCall;

  constructor(call: WithdrawRemainingFundsCall) {
    this._call = call;
  }
}
