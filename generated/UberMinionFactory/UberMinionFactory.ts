// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SummonUberMinion extends ethereum.Event {
  get params(): SummonUberMinion__Params {
    return new SummonUberMinion__Params(this);
  }
}

export class SummonUberMinion__Params {
  _event: SummonUberMinion;

  constructor(event: SummonUberMinion) {
    this._event = event;
  }

  get uberminion(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dao(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uberHaus(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get controller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get initialDelegate(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get delegateRewardFactor(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minionId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get desc(): string {
    return this._event.parameters[7].value.toString();
  }

  get name(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class UberMinionFactory extends ethereum.SmartContract {
  static bind(address: Address): UberMinionFactory {
    return new UberMinionFactory("UberMinionFactory", address);
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ourMinions(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "ourMinions",
      "ourMinions(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_ourMinions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ourMinions",
      "ourMinions(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  summonUberHausMinion(
    _dao: Address,
    _uberHaus: Address,
    _controller: Address,
    _initialDelegate: Address,
    _delegateRewardFactor: BigInt,
    _desc: string
  ): Address {
    let result = super.call(
      "summonUberHausMinion",
      "summonUberHausMinion(address,address,address,address,uint256,string):(address)",
      [
        ethereum.Value.fromAddress(_dao),
        ethereum.Value.fromAddress(_uberHaus),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromAddress(_initialDelegate),
        ethereum.Value.fromUnsignedBigInt(_delegateRewardFactor),
        ethereum.Value.fromString(_desc)
      ]
    );

    return result[0].toAddress();
  }

  try_summonUberHausMinion(
    _dao: Address,
    _uberHaus: Address,
    _controller: Address,
    _initialDelegate: Address,
    _delegateRewardFactor: BigInt,
    _desc: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "summonUberHausMinion",
      "summonUberHausMinion(address,address,address,address,uint256,string):(address)",
      [
        ethereum.Value.fromAddress(_dao),
        ethereum.Value.fromAddress(_uberHaus),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromAddress(_initialDelegate),
        ethereum.Value.fromUnsignedBigInt(_delegateRewardFactor),
        ethereum.Value.fromString(_desc)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uberMinions(param0: BigInt): Address {
    let result = super.call("uberMinions", "uberMinions(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_uberMinions(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uberMinions",
      "uberMinions(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateOwner(_newOwner: Address): Address {
    let result = super.call("updateOwner", "updateOwner(address):(address)", [
      ethereum.Value.fromAddress(_newOwner)
    ]);

    return result[0].toAddress();
  }

  try_updateOwner(_newOwner: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "updateOwner",
      "updateOwner(address):(address)",
      [ethereum.Value.fromAddress(_newOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SummonUberHausMinionCall extends ethereum.Call {
  get inputs(): SummonUberHausMinionCall__Inputs {
    return new SummonUberHausMinionCall__Inputs(this);
  }

  get outputs(): SummonUberHausMinionCall__Outputs {
    return new SummonUberHausMinionCall__Outputs(this);
  }
}

export class SummonUberHausMinionCall__Inputs {
  _call: SummonUberHausMinionCall;

  constructor(call: SummonUberHausMinionCall) {
    this._call = call;
  }

  get _dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uberHaus(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _initialDelegate(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _delegateRewardFactor(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _desc(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class SummonUberHausMinionCall__Outputs {
  _call: SummonUberHausMinionCall;

  constructor(call: SummonUberHausMinionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpdateOwnerCall extends ethereum.Call {
  get inputs(): UpdateOwnerCall__Inputs {
    return new UpdateOwnerCall__Inputs(this);
  }

  get outputs(): UpdateOwnerCall__Outputs {
    return new UpdateOwnerCall__Outputs(this);
  }
}

export class UpdateOwnerCall__Inputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateOwnerCall__Outputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
